{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Fabric Lab","text":""},{"location":"#overview","title":"Overview","text":"<p>Fabric Lab is a public template for artificial intelligence and machine learning research projects using Lightning AI's Lightning Fabric.</p> <p>The recommended way for Fabric Lab users to create new repos is with the use this template button.</p> <p>The example uses a language transformer borrowed from the PyTorch Lightning demos.</p>"},{"location":"#source-module","title":"Source Module","text":"<p><code>fabriclab.core</code> contains code for the Lightning Module and Trainer.</p> <p><code>fabriclab.components</code> contains tasks grouped by purpose for cohesion.</p> <p><code>fabriclab.pipeline</code> contains code for data acquistion and preprocessing, and building a TorchDataset.</p> <p><code>fabriclab.serve</code> contains code for model serving APIs built with FastAPI.</p> <p><code>fabriclab.cli</code> contains code for the command line interface built with Typerand Rich.</p> <p><code>fabriclab.app</code> contains code for data apps built with Streamlit.</p> <p><code>fabriclab.config</code> assists with project, trainer, and sweep configurations.</p>"},{"location":"#project-root","title":"Project Root","text":"<p><code>data</code> directory should be used to cache the TorchDataset and training splits locally if the size of the dataset allows for local storage. additionally, this directory should be used to cache predictions during HPO sweeps.</p> <p><code>docs</code> directory should be used to store technical documentation.</p> <p><code>logs</code> directory will store logs generated from experiment managers and profilers.</p> <p><code>models</code> directory will store training checkpoints and the pre-trained ONNX model.</p> <p><code>notebooks</code> directory can be used to present exploratory data analysis, explain math concepts, and create a presentation notebook to accompany a conference style paper.</p> <p><code>requirements</code> directory should mirror base requirements and extras found in setup.cfg. the requirements directory and requirements.txt at root are required by the basic CircleCI GitHub Action.</p> <p><code>tests</code> module contains unit and integration tests targeted by pytest.</p> <p><code>setup.py</code> <code>setup.cfg</code> <code>pyproject.toml</code> and <code>MANIFEST.ini</code> assist with packaging the Python project.</p> <p><code>.pre-commit-config.yaml</code> is required by pre-commit to install its git-hooks.</p>"},{"location":"#base-requirements-and-extras","title":"Base Requirements and Extras","text":"<p>Fabric Lab installs minimal requirements out of the box, and provides extras to make creating robust virtual environments easier. To view the requirements, in setup.cfg, see <code>install_requires</code> for the base requirements and <code>options.extras_require</code> for the available extras.</p> <p>The recommended install is as follows:</p> <pre><code>python3 -m venv .venv\nsource .venv/bin/activate\npip install -e \".[full, { domain extra(s) }]\"\n</code></pre> <p>where { domain extra(s) } is one of, or some combination of (vision, text, audio, rl, forecast) e.g.</p> <pre><code>python3 -m venv .venv\nsource .venv/bin/activate\npip install -e \".[full, text]\"\n</code></pre>"},{"location":"#using-fabric-lab","title":"Using Fabric Lab","text":"<p>After installing fabric-lab, you can run the demo with:</p> <pre><code>lab run demo\n</code></pre>"},{"location":"reference/core/","title":"Core","text":""},{"location":"reference/core/#fabriclab.core.LabTrainer","title":"<code>fabriclab.core.LabTrainer</code>","text":""},{"location":"reference/core/#fabriclab.core.LabModule","title":"<code>fabriclab.core.LabModule</code>","text":"<p>             Bases: <code>Module</code></p>"},{"location":"reference/pipeline/","title":"Pipeline","text":""},{"location":"reference/pipeline/#fabriclab.pipeline.LabDataModule","title":"<code>fabriclab.pipeline.LabDataModule</code>","text":""}]}